"""The root of all queries."""
type Query {
  """The ID of an object"""
  id: ID!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  posts(after: String, first: Int, before: String, last: Int): PostConnection!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""A connection to a list of items."""
type PostConnection implements Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]!
}

"""A connection to a list of items."""
interface Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge."""
  node: Post

  """A cursor for use in pagination."""
  cursor: String!
}

"""Post data"""
type Post implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!
  content: String
  comments(after: String, first: Int, before: String, last: Int): CommentConnection!
  createdAt: String
  updatedAt: String
}

"""A connection to a list of items."""
type CommentConnection implements Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommentEdge]!
}

"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge."""
  node: Comment

  """A cursor for use in pagination."""
  cursor: String!
}

"""Comment data"""
type Comment implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!
  body: String
  post: Post
  createdAt: String
  updatedAt: String
}

type Mutation {
  CommentAdd(input: CommentAddInput!): CommentAddPayload
}

type CommentAddPayload {
  commentEdge: CommentEdge

  """Default error field resolver."""
  error: String

  """Default success field resolver."""
  success: Boolean
  clientMutationId: String
}

input CommentAddInput {
  """The post Global Id."""
  post: ID!

  """The comment body."""
  body: String!
  clientMutationId: String
}

type Subscription {
  CommentNew(input: CommentNewInput!): CommentNewPayload
}

type CommentNewPayload {
  commentEdge: CommentEdge
  clientSubscriptionId: String
}

input CommentNewInput {
  """The post Global Id."""
  post: ID!
  clientSubscriptionId: String
}
