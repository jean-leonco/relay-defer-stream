"""
Directs the executor to defer this fragment when the `if` argument is true or undefined.
"""
directive @defer(
  """Deferred when true or undefined."""
  if: Boolean

  """Unique name"""
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
Directs the executor to stream plural fields when the `if` argument is true or undefined.
"""
directive @stream(
  """Stream when true or undefined."""
  if: Boolean

  """Unique name"""
  label: String

  """Number of items to return immediately"""
  initialCount: Int = 0
) on FIELD

"""The root of all queries."""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  posts(after: String, first: Int, before: String, last: Int): PostConnection!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""A connection to a list of items."""
type PostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge"""
  node: Post

  """A cursor for use in pagination"""
  cursor: String!
}

"""Post data"""
type Post implements Node {
  """The ID of an object"""
  id: ID!
  content: String
  comments(after: String, first: Int, before: String, last: Int): CommentConnection!
  createdAt: String
  updatedAt: String
}

"""A connection to a list of items."""
type CommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommentEdge]
}

"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge"""
  node: Comment

  """A cursor for use in pagination"""
  cursor: String!
}

"""Comment data"""
type Comment implements Node {
  """The ID of an object"""
  id: ID!
  body: String
  post: Post
  createdAt: String
  updatedAt: String
}

type Mutation {
  CommentAdd(input: CommentAddInput!): CommentAddPayload
}

type CommentAddPayload {
  commentEdge: CommentEdge

  """Default error field resolver."""
  error: String

  """Default success field resolver."""
  success: Boolean
  clientMutationId: String
}

input CommentAddInput {
  """The post Global Id."""
  post: ID!

  """The comment body."""
  body: String!
  clientMutationId: String
}